import jax.numpy as jnp
import pandas as pd


def getKMatrixGridMeshTemplates(elemSize, physics):
    dx, dy, dz = elemSize[0], elemSize[1], elemSize[2]

    if physics == 'structural' or physics == 'compliantMechanism':
        def Knn_00(dx, dy, dz):
            # Use the same scaling factors as 2D version
            t2 = 1.0 / dx
            t3 = dz * dy * t2 * (1.0 / 3.0)  # Same as 2D
            t4 = dz * dy * t2 * (1.0 / 6.0)  # Same as 2D
            
            # Create the full 24x24 matrix directly
            Knn_00 = jnp.reshape(jnp.array([
                t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]), (24, 24))
            
            return Knn_00
       


        def Knn_11(dx, dy, dz):
            # Use the same scaling factors as 2D version
            t2 = 1.0 / dy
            t3 = dz * dx * t2 * (1.0 / 6.0)  # Same as 2D
            t4 = dz * dx * t2 * (1.0 / 3.0)  # Same as 2D
            
            # Create the full 24x24 matrix directly
            Knn_11 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]), (24, 24))
            return Knn_11


        def Knn_22(dx, dy, dz):
            # Use the same scaling factors as Knn_00 from 2D version
            t2 = 1.0 / dz  # Using dz instead of dx for z-direction
            t3 = dy * dx * t2 * (1.0 / 3.0)  # Similar to Knn_00 but for z-direction
            t4 = dy * dx * t2 * (1.0 / 6.0)  # Similar to Knn_00 but for z-direction
            
            # Create the full 24x24 matrix directly
            Knn_22 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3,
            ]), (24, 24))
            return Knn_22


        def Knn_01(dx, dy, dz):
            # Use scaling factors similar to Knn_02 from 2D version
            t2 = 1.0 / dz
            t3 = dx * dy * t2 * (1.0 / 3.0)
            t4 = dx * dy * t2 * (1.0 / 6.0)
            
            # Create the full 24x24 matrix directly
            Knn_01 = jnp.reshape(jnp.array([
                0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0,
                1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0,
                -1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0,
                -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t4, 0, 0, -t4, 0,
                t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, -t4, 0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0,
                t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 0, 0, t4, 0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0,
                -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0, t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, -t3, 0, 0, t3, 0,
                -t3, 0, 0, t4, 0, 0, -t4, 0, 0, t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, -t3, 0, 0, t4, 0, 0, -t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, t3, 0, 0, -t3, 0,
                t3, 0, 0, -t4, 0, 0, t4, 0, 0, -t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]), (24, 24))
            return Knn_01


        def Knn_02(dx, dy, dz):
            # Updated scaling factors for 3D x-z coupling
            t2 = 1.0 / dy  # Factor for x-direction
            t3 = dx * dz * t2 * (1.0 / 3.0)  # Similar to 2D but using dz instead of dy
            t4 = dx * dz * t2 * (1.0 / 6.0)  # Similar to 2D but using dz instead of dy
            
            # Create the full 24x24 matrix directly
            Knn_02 = jnp.reshape(jnp.array([
                0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, t4, 0, 0,
                0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, 0, 0, 1.0/2.0, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, t3, 0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, -1.0/2.0, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -t3, 0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t4, 0, 0, -t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, -t4, 0, 0, 1.0/2.0, 0, 0, t3, 0, 0, -1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, 0, 0, t4, 0, 0, -1.0/2.0, 0, 0, -t3, 0, 0, 1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, t4, 0, 0,
                0, 0, -t3, 0, 0, t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0,
                0, 0, t3, 0, 0, -t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0,
            ]), (24, 24))
            return Knn_02

            
           


        def Knn_12(dx, dy, dz):
            # Updated scaling factors for 3D y-z coupling
            t2 = 1.0 / dx  # Factor for y-direction
            t3 = dy * dz * t2 * (1.0 / 6.0)  # Similar to 2D Knn_12 but using dz
            t4 = dy * dz * t2 * (1.0 / 3.0)  # Similar to 2D Knn_12 but using dz
            
            # Create the full 24x24 matrix directly
            Knn_12 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3,
                0, 1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, -1.0/2.0, 0, 0, t3, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3,
                0, t3, 0, 0, -t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4,
                0, -t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4,
                0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4,
                0, t4, 0, 0, -t4, 0, 0, -t3, 0, 0, t3, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0, 0, -t4, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t4, 0, 0, -t4,
                0, -t4, 0, 0, t4, 0, 0, t3, 0, 0, -t3, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0, 0, t4, 0, 0, -t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, -t3, 0, 0, t3, 0, 0, t4, 0, 0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0,
                0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t3, 0, 0, -t3, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, -1.0/2.0, 0, 0, 1.0/2.0,
                0, -t4, 0, 0, -t4, 0, 0, t4, 0, 0, t4, 0, 0, -t4, 0, 0, t4, 0, 0, 1.0/2.0, 0, 0, -1.0/2.0, 0,
            ]), (24, 24))
            return Knn_12


        def Knn_44(dx, dy, dz):
            """
            Shear stiffness template for the yz plane (component C44)
            """
            # Calculate scaling factors based on 2D Knn_22 pattern
            t2 = 1.0 / dy
            t3 = dz * t2 * (1.0 / 6.0)
            t4 = dz * t2 * (1.0 / 3.0)
            t5 = 1.0 / dz
            t6 = dy * t5 * (1.0 / 3.0)
            t7 = dy * t5 * (1.0 / 6.0)
            
            # Create the full 24x24 matrix directly
            Knn_44 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0,
                0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0,
                0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0,
                0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0,
                0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0,
                0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, -t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0,
                0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, -1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, t3, -1.0/4.0,
                0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, 1.0/4.0, 0, t3, -1.0/4.0, 0, t4, 1.0/4.0,
                0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6
            ]), (24, 24))
            
            return Knn_44
        
        def Knn_55(dx, dy, dz):
            """
            Shear stiffness template for the xz plane (component C55)
            """
            # Calculate scaling factors based on 2D Knn_22 pattern but for xz
            t2 = 1.0 / dx
            t3 = dz * t2 * (1.0 / 6.0)
            t4 = dz * t2 * (1.0 / 3.0)
            t5 = 1.0 / dz
            t6 = dx * t5 * (1.0 / 3.0)
            t7 = dx * t5 * (1.0 / 6.0)
            
            # Create the full 24x24 matrix directly
            Knn_55 = jnp.reshape(jnp.array([
                t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6,
                -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6,
                -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7,
                t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7,
                t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7,
                -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7,
                -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t6, -1.0/4.0, 0, -t6,
                t4, 0, 1.0/4.0, -t4, 0, -1.0/4.0, -t3, 0, -1.0/4.0, t3, 0, 1.0/4.0, t3, 0, 1.0/4.0, -t3, 0, -1.0/4.0, -t4, 0, -1.0/4.0, t4, 0, 1.0/4.0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                1.0/4.0, 0, t6, -1.0/4.0, 0, -t6, -1.0/4.0, 0, -t7, 1.0/4.0, 0, t7, 1.0/4.0, 0, t7, -1.0/4.0, 0, -t7, -1.0/4.0, 0, -t6, 1.0/4.0, 0, t6
            ]), (24, 24))
            
            return Knn_55
        
        def Knn_66(dx, dy, dz):
            """
            Shear stiffness template for the xy plane (component C66)
            """
            # Calculate scaling factors based on 2D Knn_22 pattern but for xy
            t2 = 1.0 / dx
            t3 = dy * t2 * (1.0 / 6.0)
            t4 = dy * t2 * (1.0 / 3.0)
            t5 = 1.0 / dy
            t6 = dx * t5 * (1.0 / 3.0)
            t7 = dx * t5 * (1.0 / 6.0)
            
            # Create the full 24x24 matrix directly
            Knn_66 = jnp.reshape(jnp.array([
                t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0,
                1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0,
                -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0,
                -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0,
                1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0,
                1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0,
                -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0,
                -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t6, 0, -1.0/4.0, -t6, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 1.0/4.0, 0, -t4, -1.0/4.0, 0, -t3, -1.0/4.0, 0, t3, 1.0/4.0, 0, t3, 1.0/4.0, 0, -t3, -1.0/4.0, 0, -t4, -1.0/4.0, 0, t4, 1.0/4.0, 0,
                1.0/4.0, t6, 0, -1.0/4.0, -t6, 0, -1.0/4.0, -t7, 0, 1.0/4.0, t7, 0, 1.0/4.0, t7, 0, -1.0/4.0, -t7, 0, -1.0/4.0, -t6, 0, 1.0/4.0, t6, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]), (24, 24))
            
            return Knn_66

        K_templates = {'00': Knn_00(dx, dy, dz), '11': Knn_11(dx, dy, dz),
                       '22': Knn_22(dx, dy, dz), '01': Knn_01(dx, dy, dz),
                       '02': Knn_02(dx, dy, dz), '12': Knn_12(dx, dy, dz),
                        '44': Knn_44(dx, dy, dz), '55': Knn_55(dx, dy, dz),
                        '66': Knn_66(dx, dy, dz)}

    elif physics == 'thermal':
        def Knn_00(dx, dy, dz):
            t2 = 1.0 / dx
            t3 = (dy * dz * t2) / 3.0
            t4 = (dy * dz * t2) / 6.0
            t5 = -t3
            t6 = -t4
            Knn_00 = jnp.reshape(jnp.array([t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3]), (8, 8))
            return Knn_00


        def Knn_11(dx, dy, dz):
            t2 = 1.0 / dy
            t3 = (dx * dz * t2) / 3.0
            t4 = (dx * dz * t2) / 6.0
            t5 = -t3
            t6 = -t4
            Knn_11 = jnp.reshape(jnp.array([t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3]), (8, 8))
            return Knn_11


        def Knn_01(dx, dy, dz):
            Knn_01 = jnp.reshape(jnp.array([1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0, 0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0,
                                            0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0,
                                            -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0, 0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0,
                                            0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0,
                                            1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0, 0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0,
                                            0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0,
                                            -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0, 0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0,
                                            0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0]), (8, 8))
            return Knn_01


        K_templates = {'00': Knn_00(dx, dy, dz), '11': Knn_11(dx, dy, dz), '01': Knn_01(dx, dy, dz)}

    return K_templates
