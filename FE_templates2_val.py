import jax.numpy as jnp
import pandas as pd


def getKMatrixGridMeshTemplates(elemSize, physics):
    dx, dy, dz = elemSize[0], elemSize[1], elemSize[2]

    if physics == 'structural' or physics == 'compliantMechanism':
        def Knn_00(dx, dy, dz):
            # Calculate scaling factors
            t1 = 1*(dy*dz)/(9*dx)
            t2 = -1*(dy*dz)/(9*dx)
            t3 = -1*(dy*dz)/(18*dx)
            t4 = 1*(dy*dz)/(18*dx)
            t5 = -1*(dy*dz)/(36*dx)
            t6 = 1*(dy*dz)/(36*dx)
            
            # Create the full 24x24 matrix directly
            Knn_00 = jnp.reshape(jnp.array([
                t1, 0, 0, t2, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t5, 0, 0, t6, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t1, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t6, 0, 0, t5, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, t4, 0, 0, t1, 0, 0, t2, 0, 0, t5, 0, 0, t6, 0, 0, t4, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0, t6, 0, 0, t5, 0, 0, t3, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, t3, 0, 0, t5, 0, 0, t6, 0, 0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, t4, 0, 0, t6, 0, 0, t5, 0, 0, t2, 0, 0, t1, 0, 0, t4, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t5, 0, 0, t6, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t6, 0, 0, t5, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]), (24, 24))
            
            return Knn_00
       


        def Knn_11(dx, dy, dz):
            # Calculate scaling factors
            t1 = 1*(dx*dz)/(9*dy)
            t2 = 1*(dx*dz)/(18*dy)
            t3 = -1*(dx*dz)/(18*dy)
            t4 = -1*(dx*dz)/(9*dy)
            t5 = 1*(dx*dz)/(36*dy)
            t6 = -1*(dx*dz)/(36*dy)
            
            # Create the full 24x24 matrix directly
            Knn_11 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t5, 0, 0, t6, 0, 0, t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t1, 0, 0, t4, 0, 0, t3, 0, 0, t5, 0, 0, t2, 0, 0, t3, 0, 0, t6, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t4, 0, 0, t1, 0, 0, t2, 0, 0, t6, 0, 0, t3, 0, 0, t2, 0, 0, t5, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t6, 0, 0, t5, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t5, 0, 0, t6, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t5, 0, 0, t2, 0, 0, t3, 0, 0, t6, 0, 0, t2, 0, 0, t1, 0, 0, t4, 0, 0, t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t6, 0, 0, t3, 0, 0, t2, 0, 0, t5, 0, 0, t3, 0, 0, t4, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t6, 0, 0, t5, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]), (24, 24))

            
            return Knn_11


        def Knn_22(dx, dy, dz):
            # Calculate scaling factors
            t1 = 1*(dx*dy)/(9*dz)
            t2 = 1*(dx*dy)/(18*dz)
            t3 = 1*(dx*dy)/(36*dz)
            t4 = -1*(dx*dy)/(9*dz)
            t5 = -1*(dx*dy)/(18*dz)
            t6 = -1*(dx*dy)/(36*dz)

            
            # Create the full 24x24 matrix directly
            Knn_22 = jnp.reshape(jnp.array([
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t2, 0, 0, t4, 0, 0, t5, 0, 0, t6, 0, 0, t5,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t2, 0, 0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t5, 0, 0, t4, 0, 0, t5, 0, 0, t6,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0, t2, 0, 0, t6, 0, 0, t5, 0, 0, t4, 0, 0, t5,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t2, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0, t5, 0, 0, t6, 0, 0, t5, 0, 0, t4,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t4, 0, 0, t5, 0, 0, t6, 0, 0, t5, 0, 0, t1, 0, 0, t2, 0, 0, t3, 0, 0, t2,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t5, 0, 0, t4, 0, 0, t5, 0, 0, t6, 0, 0, t2, 0, 0, t1, 0, 0, t2, 0, 0, t3,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t6, 0, 0, t5, 0, 0, t4, 0, 0, t5, 0, 0, t3, 0, 0, t2, 0, 0, t1, 0, 0, t2,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, t5, 0, 0, t6, 0, 0, t5, 0, 0, t4, 0, 0, t2, 0, 0, t3, 0, 0, t2, 0, 0, t1,
                ]), (24, 24))

            return Knn_22


        def Knn_01(dx, dy, dz):
            # Calculate scaling factors for xy coupling
            t1 = (1*dz)/12*(dx*dy)
            t2 = (-1*dz)/12*(dx*dy)
            t3 = (1*dz)/24*(dx*dy)
            t4 = (-1*dz)/24*(dx*dy)

            
            # Create the full 24x24 matrix directly
            Knn_01 = jnp.reshape(jnp.array([
                0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0,
                t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0,
                t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0,
                t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0,
                t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ]), (24, 24))

            
            return Knn_01


        def Knn_02(dx, dy, dz):
            # Calculate scaling factors for xz coupling
            t1 = (1*dy)/12*(dx*dz)
            t2 = (1*dy)/24*(dx*dz)
            t3 = (-1*dy)/12*(dx*dz)
            t4 = (-1*dy)/24*(dx*dz)

            
            # Create the full 24x24 matrix directly
            Knn_02 = jnp.reshape(jnp.array([
                0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0,
                0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0,
                0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0,
                0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0,
                0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0,
                0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0,
                0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0,
                0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t3,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0,
            ]), (24, 24))

            
            return Knn_02


        def Knn_12(dx, dy, dz):
            # Calculate scaling factors for yz coupling
            t1 = (1*dx)/12*(dy*dz)
            t2 = (1*dx)/24*(dy*dz)
            t3 = (-1*dx)/12*(dy*dz)
            t4 = (-1*dx)/24*(dy*dz)
            
            # Create the full 24x24 matrix directly
            Knn_12 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3,
                0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4,
                0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3,
                0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4,
                0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t4, 0, 0, t3, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t3, 0, 0, t4, 0, 0, t4, 0, 0, t3, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0, 0, t3, 0, 0, t4, 0, 0, t2, 0, 0, t1, 0,
            ]), (24, 24))

            return Knn_12


        def Knn_44(dx, dy, dz):
            """
            Shear stiffness template for the yz plane (component C44)
            """
            # Calculate scaling factors
            t1 = (1*dx)/12
            t2 = (-1*dx)/12 
            
            # Create the full 24x24 matrix directly
            Knn_44 = jnp.reshape(jnp.array([
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0
            ]), (24, 24))
            
            return Knn_44
        
        def Knn_55(dx, dy, dz):
            """
            Shear stiffness template for the xz plane (component C55)
            """
            # Calculate scaling factors
            t1 = (1*dy)/12
            t2 = (-1*dy)/12 
            
            # Create the full 24x24 matrix directly
            Knn_55 = jnp.reshape(jnp.array([
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0
            ]), (24, 24))
            
            return Knn_55
        
        def Knn_66(dx, dy, dz):
            """
            Shear stiffness template for the xy plane (component C66)
            """
            # Calculate scaling factors
            t1 = (1*dz)/12
            t2 = (-1*dz)/12 
            
            # Create the full 24x24 matrix directly
            Knn_66 = jnp.reshape(jnp.array([
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0,
                t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0,
                t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0, t1, 0, 0, t2, 0, 0, t2, 0, 0, t1, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
            ]), (24, 24))

            
            return Knn_66


        K_templates = {'00': Knn_00(dx, dy, dz), '11': Knn_11(dx, dy, dz),
                       '22': Knn_22(dx, dy, dz), '01': Knn_01(dx, dy, dz),
                       '02': Knn_02(dx, dy, dz), '12': Knn_12(dx, dy, dz),
                        '44': Knn_44(dx, dy, dz), '55': Knn_55(dx, dy, dz),
                        '66': Knn_66(dx, dy, dz)}

    elif physics == 'thermal':
        def Knn_00(dx, dy, dz):
            t2 = 1.0 / dx
            t3 = (dy * dz * t2) / 3.0
            t4 = (dy * dz * t2) / 6.0
            t5 = -t3
            t6 = -t4
            Knn_00 = jnp.reshape(jnp.array([t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3,
                                            t3, t5, t6, t4, t5, t3, t4, t6,
                                            t6, t4, t3, t5, t4, t6, t5, t3]), (8, 8))
            return Knn_00


        def Knn_11(dx, dy, dz):
            t2 = 1.0 / dy
            t3 = (dx * dz * t2) / 3.0
            t4 = (dx * dz * t2) / 6.0
            t5 = -t3
            t6 = -t4
            Knn_11 = jnp.reshape(jnp.array([t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3,
                                            t3, t4, t6, t5, t4, t3, t5, t6,
                                            t6, t5, t3, t4, t5, t6, t4, t3]), (8, 8))
            return Knn_11


        def Knn_01(dx, dy, dz):
            Knn_01 = jnp.reshape(jnp.array([1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0, 0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0,
                                            0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0,
                                            -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0, 0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0,
                                            0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0,
                                            1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0, 0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0,
                                            0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0,
                                            -1.0 / 2.0, 0.0, 1.0 / 2.0, 0.0, 0.0, -1.0 / 2.0, 0.0, 1.0 / 2.0,
                                            0.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 1.0 / 2.0, 0.0, -1.0 / 2.0, 0.0]), (8, 8))
            return Knn_01


        K_templates = {'00': Knn_00(dx, dy, dz), '11': Knn_11(dx, dy, dz), '01': Knn_01(dx, dy, dz)}

    return K_templates
